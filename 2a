module CLA (
    input [31:0] A, B,
    input Cin,
    output [31:0] S,
    output Cout
);
    // Internal signals
    wire [7:0] G, P; // Generate and Propagate signals for each 4-bit block
    wire [8:0] C;    // Carry signals (C[0] = Cin, C[8] = Cout)

    // Initialize the first carry-in
    assign C[0] = Cin;

    // Generate and Propagate signals for each 4-bit block
    genvar i;
    generate
        for (i = 0; i < 8; i = i + 1) begin : CLA_Block
            // Compute Generate (G) and Propagate (P) for the current block
            assign G[i] = (A[4*i+3] & B[4*i+3]) | // G = A3B3 + A2B2 + A1B1 + A0B0
                          (A[4*i+2] & B[4*i+2]) |
                          (A[4*i+1] & B[4*i+1]) |
                          (A[4*i] & B[4*i]);

            assign P[i] = (A[4*i+3] | B[4*i+3]) & // P = (A3+B3)(A2+B2)(A1+B1)(A0+B0)
                          (A[4*i+2] | B[4*i+2]) &
                          (A[4*i+1] | B[4*i+1]) &
                          (A[4*i] | B[4*i]);

            // Compute Carry for the next block
            assign C[i+1] = G[i] | (P[i] & C[i]);

            // Instantiate the 4-bit RCA for the current block
            RCA_4bit RCA (
                .A(A[4*i+3:4*i]),
                .B(B[4*i+3:4*i]),
                .Cin(C[i]),
                .S(S[4*i+3:4*i]),
                .Cout() // No need for Cout from RCA since we use CLA logic
            );
        end
    endgenerate

    // Final carry-out
    assign Cout = C[8];
endmodule
